""""
Tuy·ªát v·ªùi, b·∫°n mu·ªën x√¢y d·ª±ng m·ªôt main process ƒëi·ªÅu khi·ªÉn 2 process con, v√† c√≥ kh·∫£ nƒÉng g·ª≠i t√≠n hi·ªáu (signal) t·ªõi c√°c process con
gi·ªëng nh∆∞ ki·ªÉu qu·∫£n l√Ω ti·∫øn tr√¨nh ki·ªÉu "master-worker" ho·∫∑c "controller-subprocess".

D∆∞·ªõi ƒë√¢y l√† v√≠ d·ª• chi ti·∫øt v·ªÅ:
+ T·∫°o 2 process con
+ Main process qu·∫£n l√Ω, g·ª≠i t√≠n hi·ªáu (v√≠ d·ª•: SIGTERM) t·ªõi t·ª´ng process con
+ Process con x·ª≠ l√Ω t√≠n hi·ªáu (b·∫Øt SIGTERM v√† tho√°t m·ªôt c√°ch an to√†n)

Output demo:
üß† Main controller starting 2 workers...
üì¶ Process 1 PID: 12345
üì¶ Process 2 PID: 12346
[Main] Running controller loop 0
[Process 1] Working...
[Process 2] Doing something...
...
[Main] Sending SIGTERM to both workers...
[Process 1] Received SIGTERM. Exiting...
[Process 2] Received SIGTERM. Exiting...
‚úÖ All workers exited cleanly.

"""

import multiprocessing
import time
import os
import signal
import sys

# Process 1
def worker_one():
    def handle_sigterm(signum, frame):
        print("[Process 1] Received SIGTERM. Exiting...")
        sys.exit(0)

    signal.signal(signal.SIGTERM, handle_sigterm)

    while True:
        print("[Process 1] Working...")
        time.sleep(1)

# Process 2
def worker_two():
    def handle_sigterm(signum, frame):
        print("[Process 2] Received SIGTERM. Exiting...")
        sys.exit(0)

    signal.signal(signal.SIGTERM, handle_sigterm)

    while True:
        print("[Process 2] Doing something...")
        time.sleep(1)

if __name__ == "__main__":
    print("üß† Main controller starting 2 workers...")

    p1 = multiprocessing.Process(target=worker_one)
    p2 = multiprocessing.Process(target=worker_two)

    p1.start()
    p2.start()

    print(f"üì¶ Process 1 PID: {p1.pid}")
    print(f"üì¶ Process 2 PID: {p2.pid}")

    try:
        # Main loop (controller logic)
        for i in range(10):
            print(f"[Main] Running controller loop {i}")
            time.sleep(1)

        print("[Main] Sending SIGTERM to both workers...")
        os.kill(p1.pid, signal.SIGTERM)
        os.kill(p2.pid, signal.SIGTERM)

        p1.join()
        p2.join()
        print("‚úÖ All workers exited cleanly.")

    except KeyboardInterrupt:
        print("\n[Main] Caught CTRL+C. Terminating workers...")
        p1.terminate()
        p2.terminate()
